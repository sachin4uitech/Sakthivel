from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_mail import Mail, Message
from twilio.rest import Client
from fpdf import FPDF

app = Flask(__name__)
app.secret_key = "your_secret_key"

# Database Configuration
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///database.db"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db = SQLAlchemy(app)

# Email Configuration (Use your credentials)
app.config["MAIL_SERVER"] = "smtp.gmail.com"
app.config["MAIL_PORT"] = 587
app.config["MAIL_USERNAME"] = "yourcompany@gmail.com"
app.config["MAIL_PASSWORD"] = "yourpassword"
app.config["MAIL_USE_TLS"] = True
mail = Mail(app)

# Twilio Configuration (Replace with your credentials)
TWILIO_SID = "your_twilio_sid"
TWILIO_AUTH_TOKEN = "your_twilio_auth_token"
TWILIO_PHONE_NUMBER = "your_twilio_phone_number"

# Database Model
class Order(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    customer_name = db.Column(db.String(100), nullable=False)
    contact = db.Column(db.String(15), nullable=False)
    email = db.Column(db.String(100), nullable=False)
    address = db.Column(db.String(200), nullable=False)
    receiver_name = db.Column(db.String(100), nullable=False)
    receiver_contact = db.Column(db.String(15), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    bottle_size = db.Column(db.String(10), nullable=False)
    payment_method = db.Column(db.String(50), nullable=False)

# Function to send email
def send_email(receiver_email, receiver_name, order_details):
    try:
        msg = Message("Water Delivery Confirmation", sender="yourcompany@gmail.com", recipients=[receiver_email])
        msg.body = f"Hello {receiver_name},\n\nYour order has been placed successfully.\n\n{order_details}\n\nThank you!"
        mail.send(msg)
        return True
    except Exception as e:
        print("Email Error:", e)
        return False

# Function to send SMS
def send_sms(receiver_contact, receiver_name):
    try:
        client = Client(TWILIO_SID, TWILIO_AUTH_TOKEN)
        message = client.messages.create(
            body=f"Hello {receiver_name}, your water supply order has been placed successfully.",
            from_=TWILIO_PHONE_NUMBER,
            to=receiver_contact
        )
        return True
    except Exception as e:
        print("SMS Error:", e)
        return False

# Function to generate PDF receipt
def generate_pdf(customer_name, receiver_name, order_details):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, "Water Supplier Order Receipt", ln=True, align='C')
    pdf.ln(10)
    pdf.multi_cell(0, 10, f"Customer Name: {customer_name}\nReceiver Name: {receiver_name}\n\n{order_details}")
    pdf.output("static/Water_Order_Receipt.pdf")

# Route for homepage
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        # Get Form Data
        customer_name = request.form["customer_name"]
        contact = request.form["contact"]
        email = request.form["email"]
        address = request.form["address"]
        receiver_name = request.form["receiver_name"]
        receiver_contact = request.form["receiver_contact"]
        quantity = request.form["quantity"]
        bottle_size = request.form["bottle_size"]
        payment_method = request.form["payment_method"]

        # Save to database
        order = Order(customer_name=customer_name, contact=contact, email=email, address=address,
                      receiver_name=receiver_name, receiver_contact=receiver_contact,
                      quantity=quantity, bottle_size=bottle_size, payment_method=payment_method)
        db.session.add(order)
        db.session.commit()

        # Prepare order details
        order_details = f"""
        Customer Name: {customer_name}
        Contact: {contact}
        Email: {email}
        Address: {address}
        Receiver Name: {receiver_name}
        Receiver Contact: {receiver_contact}
        Quantity: {quantity} bottles
        Bottle Size: {bottle_size}
        Payment Method: {payment_method}
        """

        # Send email & SMS, Generate PDF
        send_email(email, receiver_name, order_details)
        send_sms(receiver_contact, receiver_name)
        generate_pdf(customer_name, receiver_name, order_details)

        flash("Order placed successfully! A confirmation email & SMS have been sent.")
        return redirect(url_for("success"))

    return render_template("index.html")

# Success Page
@app.route("/success")
def success():
    return render_template("success.html")

if __name__ == "__main__":
    db.create_all()
    app.run(debug=True)
